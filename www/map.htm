<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Weather Station Select</title>
    <script data-cfasync="false" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script>
        var map, infoWindow, start, stations, airports;

        // Handle select button for weather station selection
        document.addEventListener("click", function(e) {
            var classes = e.target.className.split(" ");
            if (classes.indexOf("selectPWS") > -1) {
                window.top.postMessage({"WS": "pws:"+e.target.dataset.id},"*");
            } else if (classes.indexOf("selectAirport") > -1) {
                window.top.postMessage({"WS": "icao:"+e.target.dataset.id},"*");
            }
        }, false);

        // Load the map using the current location as the starting point
        function initialize() {
            if (typeof start === "object") {
                var myOptions = {
                    zoom: 14,
                    center: start,
                    streetViewControl: false,
                    mapTypeControl: false,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                }
                map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
                infoWindow = new google.maps.InfoWindow;
                plotMarker("orgin",{message: "Current Location"},start.lat(),start.lng());
                plotAllMarkers(stations,true);
                google.maps.event.addListenerOnce(map, "tilesloaded", function(){
                    window.top.postMessage({"loaded":true},"*");
                });
                google.maps.event.addListener(map, "click", function(){
                    infoWindow.close();
                });
            } else {
                setTimeout(initialize,1);
            }
        }

        // Handle communication from parent window
        window.onmessage = function(e) {
            var data = e.data;
            // Handle start point data
            if (data.type === "currentLocation") {
                start = new google.maps.LatLng(data.payload.lat,data.payload.lon);
            // Handle stations data
            } else if (data.type === "pwsData") {
                stations = JSON.parse(decodeURIComponent(data.payload));
                initialize();
            } else if (data.type === "airportData") {
                airports = JSON.parse(decodeURIComponent(data.payload));
                plotAllMarkers(airports);
            }
        }

        // Plot all stations on the map
        function plotAllMarkers(markers,openFirst) {
            var bounds = new google.maps.LatLngBounds(),
                marker;

            for (var i=0; i<markers.length; i++) {
                marker = plotMarker((openFirst ? "pws" : "airport"),markers[i],markers[i].lat,markers[i].lon);
                if (i === 0 && openFirst === true) {
                    new google.maps.event.trigger(marker,"click");
                }
                bounds.extend(new google.maps.LatLng(markers[i].lat,markers[i].lon));
            }
            google.maps.event.addListenerOnce(map, "zoom_changed", function(){
                var zoom = map.getZoom();
                if (zoom < 11) {
                    map.setZoom(11);
                    map.setCenter(start);
                }
            });
            map.fitBounds(bounds);
        }

        // Plot an individual station on the map
        function plotMarker(type,data,lat,lon){
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(lat,lon),
                map: map,
                icon: (type === "orgin" ? "http://maps.google.com/mapfiles/ms/icons/red-dot.png" : (type ===  "pws" ? "http://maps.google.com/mapfiles/ms/icons/blue-dot.png" : "http://maps.google.com/mapfiles/ms/icons/orange-dot.png"))
            });

            google.maps.event.addListener(marker, "click", function(){
                infoWindow.close();
                html = (type === "orgin" ? "<div style='min-height:40px;text-align:center'>"+data.message+"</div>" : createInfoWindow(type,data));
                infoWindow = new google.maps.InfoWindow({
                    content: html
                });
                infoWindow.open(map, marker);
            });

            return marker;
        }

        // Create text for popup info window
        function createInfoWindow(type,data) {
            if (type === "pws") {
                return "<div style='min-height:90px;min-width:170px;text-align:center;'><h3 style='padding:0;margin:0 0 4px 0'>"+(data.city ? data.city+", " : "")+(data.state ? data.state+", " : "")+data.country+"</h3><span style='font-size:8px;margin:0;padding:0;vertical-align: top'>ID: "+data.id+"</span><br><p style='margin:0'>"+data.neighborhood+"<br>"+data.distance_mi+" mile"+(data.distance_mi > 1 ? "s" : "")+" away<br><button class='selectPWS' data-id='"+data.id+"'>Select</button></p></div>";
            } else {
                return "<div style='min-height:80px;min-width:170px;text-align:center;'><h3 style='padding:0;margin:0 0 4px 0'>"+(data.city ? data.city+", " : "")+(data.state ? data.state+", " : "")+data.country+"</h3><span style='font-size:8px;margin:0;padding:0;vertical-align: top'>Airport ICAO: "+data.icao+"</span><br><button class='selectAirport' data-id='"+data.icao+"'>Select</button></div>";
            }
        }
    </script>
    <style>
        html {
            height: 100%;
            overflow: hidden;
        }
        body {
            margin: 0;
            padding: 0;
            height: 100%;
        }
        #map_canvas {
            height: 100%;
        }
        .gm-style-iw {
            overflow: hidden !important;
            line-height: 1.35;
        }
        .selectPWS, .selectAirport {
            border-radius: 6px;
            margin-top: 2px;
        }
    </style>
</head>
<body>
    <div id="map_canvas"></div>
</body>
</html>
