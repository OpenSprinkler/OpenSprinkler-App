<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Weather Station Select</title>
    <script>
        var map, infoWindow, start, stations;

        // Handle select button for weather station selection
        document.addEventListener("click", function(e) {
            if (e.target.className.split(" ").indexOf("selectPWS") > -1) {
                window.top.postMessage({"PWS": e.target.dataset.id},"*");
            }
        }, false);

        // Load the map using the current location as the starting point
        function initialize() {
            if (typeof start === "object") {
                var myLatlng = new google.maps.LatLng(start[0],start[1]);
                var myOptions = {
                    zoom: 15,
                    center: myLatlng,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                }
                map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
                google.maps.event.addListenerOnce(map, "idle", plotAllMarkers);
                infoWindow = new google.maps.InfoWindow;
                plotMarker("orgin",{message: "Current Location"},start[0],start[1]);
            } else {
                setTimeout(initialize,1);
            }
        }

        // Flag when the iframe is finished loading
        window.onload = initialize;

        // Handle communication from parent window
        window.onmessage = function(e) {
            var data = e.data;
            // Handle start point data
            if (data.type === "currentLocation") {
                start = [data.payload.lat,data.payload.lon];
            // Handle stations data
            } else if (data.type === "pwsData") {
                stations = JSON.parse(decodeURIComponent(data.payload));
            }
        }

        // Plot all stations on the map
        function plotAllMarkers() {
            if (typeof start === "object" && typeof stations === "object") {
                var bounds = new google.maps.LatLngBounds();

                for (var i=0; i<stations.length; i++) {
                    plotMarker("pws",stations[i],stations[i].lat,stations[i].lon);
                    bounds.extend(new google.maps.LatLng(stations[i].lat,stations[i].lon));
                }
                map.fitBounds(bounds);
                map.panToBounds(bounds);
            } else {
                setTimeout(plotAllMarkers,1);
            }
        }

        // Plot an individual station on the map
        function plotMarker(type,data,lat,lon){
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(lat,lon),
                map: map,
                icon: (type === "orgin" ? "http://maps.google.com/mapfiles/ms/icons/red-dot.png" : "http://maps.google.com/mapfiles/ms/icons/blue-dot.png")
            });

            google.maps.event.addListener(marker, "click", function(){
                infoWindow.close();
                html = (type === "orgin" ? data.message : createInfoWindow(data));
                infoWindow = new google.maps.InfoWindow({
                    content: html
                });
                infoWindow.open(map, marker);
            })
        }

        // Create text for popup info window
        function createInfoWindow(data) {
            return "<div style='height:90px;width:150px;text-align:center'><h3 style='padding:0;margin:0 0 4px 0'>"+(data.city ? data.city+", " : "")+(data.state ? data.state+", " : "")+data.country+"</h3>"+data.neighborhood+"<br>"+data.distance_mi+" miles away<br><button class='selectPWS' data-id='"+data.id+"'>Select</button></div>";
        }
    </script>
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <style>
        html {
            height: 100%;
            overflow: hidden;
        }
        body {
            margin: 0;
            padding: 0;
            height: 100%;
        }
        #map_canvas {
            height: 100%;
        }
    </style>
</head>
<body>
    <div id="map_canvas"></div>
</body>
</html>
