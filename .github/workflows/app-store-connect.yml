name: iOS and macOS Build & Deploy

on:
  push:
    branches:
      - master

permissions:
  contents: read

jobs:
  build_ios:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install the Apple certificate and provisioning profile
        id: profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          MACOS_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MACOS_BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          # create variables
          CERTIFICATE_PATH=${{ runner.temp }}/build_certificate.p12
          PP_PATH=${{ runner.temp }}/build_pp.mobileprovision
          MAC_PP_PATH=${{ runner.temp }}/mac_build_pp.provisionprofile
          KEYCHAIN_PATH=${{ runner.temp }}/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$MACOS_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $MAC_PP_PATH
          uuid=`grep UUID -A1 -a $PP_PATH | grep -io "[-A-F0-9]\{36\}"`
          echo "uuid=$uuid" >> $GITHUB_OUTPUT
          muuid=`grep UUID -A1 -a $MAC_PP_PATH | grep -io "[-A-F0-9]\{36\}"`
          echo "muuid=$muuid" >> $GITHUB_OUTPUT

          # create temporary keychain
          security create-keychain -p "KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $MAC_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: "5.x"

      - name: Determine Version via GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: false

      - name: Update package.json version
        run: |
          sed -i.bak "s|\"version\": \"[0-9\.]*\"|\"version\": \"${{ steps.gitversion.outputs.semVer }}\"|" package.json

      - name: Update sw.js version
        run: |
          sed -i.bak "s|OpenSprinkler-v[0-9\.]*|OpenSprinkler-v${{ steps.gitversion.outputs.semVer }}|" www/sw.js

      - name: Update main.js App Version
        run: |
          sed -i.bak "s|appVersion: '[0-9\.]*'|appVersion: '${{ steps.gitversion.outputs.semVer }}'|" www/js/main.js

      - name: Update config.xml versions
        run: |
          # Update version attribute
          sed -i.bak "s|version=\"[0-9\.]*\"|version=\"${{ steps.gitversion.outputs.majorMinorPatch }}\"|" config.xml
          # Calculate versionCode
          major=${{ steps.gitversion.outputs.major }}
          minor=${{ steps.gitversion.outputs.minor }}
          patch=${{ steps.gitversion.outputs.patch }}
          version_code=$((major * 10000 + minor * 100 + patch))
          # Update versionCode attribute
          sed -i.bak "s|versionCode=\"[0-9]*\"|versionCode=\"$version_code\"|" config.xml
          # Update <string> element
          sed -i.bak "s|<string>[0-9\.]*</string>|<string>$version_code</string>|" config.xml

      - name: Cache Node Modules
        id: cache_npm
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Dependencies
        if: steps.cache_npm.outputs.cache-hit != 'true'
        run: npm install

      - name: Prepare and Build iOS
        run: |
          npx cordova platform add ios

      - name: Export .ipa for iOS
        env:
          EXPORT_PLIST: ${{ secrets.IOS_EXPORT_PRODUCTION }}
        run: |
          cd platforms/ios

          xcodebuild \
            PROVISIONING_PROFILE=${{ steps.profile.outputs.uuid }} \
            DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
            CODE_SIGN_STYLE="Manual" \
            -workspace "OpenSprinkler.xcworkspace" \
            -scheme "OpenSprinkler" \
            -sdk iphoneos \
            -arch arm64 \
            -configuration Release \
            -archivePath "$PWD/build/OpenSprinkler.xcarchive" archive

          EXPORT_PLIST_PATH=${{ runner.temp }}/ExportOptions.plist
          echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH

          xcodebuild \
            -exportArchive \
            -archivePath "$PWD/build/OpenSprinkler.xcarchive" \
            -exportPath "${{ runner.temp }}/export" \
            -exportOptionsPlist $EXPORT_PLIST_PATH

      - name: Swap CFBundleShortVersionString and CFBundleVersion for macOS build
        run: |
          PLIST_PATH="platforms/ios/OpenSprinkler/OpenSprinkler-Info.plist"

          # Read current values
          SHORT_VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST_PATH")
          BUNDLE_VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")

          echo "Current CFBundleShortVersionString: $SHORT_VERSION"
          echo "Current CFBundleVersion: $BUNDLE_VERSION"

          # Swap them
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $BUNDLE_VERSION" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $SHORT_VERSION" "$PLIST_PATH"

          echo "Swapped them!"
          echo "New CFBundleShortVersionString: $(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST_PATH")"
          echo "New CFBundleVersion: $(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")"

      - name: Create macOS App Sandbox Entitlements file
        run: |
          cat > ${{ runner.temp }}/macos_app_sandbox.entitlements << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" \
          "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.app-sandbox</key>
              <true/>
              <key>com.apple.security.device.camera</key>
              <true/>
              <key>com.apple.security.network.client</key>
              <true/>
              <key>com.apple.security.personal-information.location</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Export .app for macOS
        env:
          MAC_EXPORT_PLIST: ${{ secrets.MACOS_EXPORT_PRODUCTION }}
        run: |
          cd platforms/ios

          xcodebuild \
            PROVISIONING_PROFILE=${{ steps.profile.outputs.muuid }} \
            DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_ENTITLEMENTS="${{ runner.temp }}/macos_app_sandbox.entitlements" \
            -destination "platform=macOS,variant=Mac Catalyst" \
            -workspace "OpenSprinkler.xcworkspace" \
            -scheme "OpenSprinkler" \
            -configuration Release \
            -archivePath "$PWD/build/OpenSprinkler.xcarchive" archive

          MAC_EXPORT_PLIST_PATH=${{ runner.temp }}/ExportOptionsMac.plist
          echo -n "$MAC_EXPORT_PLIST" | base64 --decode --output $MAC_EXPORT_PLIST_PATH

          xcodebuild \
            -exportArchive \
            -archivePath "$PWD/build/OpenSprinkler.xcarchive" \
            -exportPath "${{ runner.temp }}/mac_export" \
            -exportOptionsPlist $MAC_EXPORT_PLIST_PATH

      - name: Decode API key
        env:
          API_KEY_BASE64: ${{ secrets.IOS_APPSTORE_API_PRIVATE_KEY }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.IOS_APPSTORE_API_KEY_ID }}.p8

      - name: Upload iOS to TestFlight
        run: |
          xcrun altool --validate-app -f ${{ runner.temp }}/export/OpenSprinkler.ipa -t ios --apiKey ${{ secrets.IOS_APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
          xcrun altool --upload-app -f ${{ runner.temp }}/export/OpenSprinkler.ipa -t ios --apiKey ${{ secrets.IOS_APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.IOS_APPSTORE_ISSUER_ID }}

      - name: Upload macOS to TestFlight
        run: |
          xcrun altool --validate-app -f ${{ runner.temp }}/mac_export/OpenSprinkler.pkg -t osx --apiKey ${{ secrets.IOS_APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
          xcrun altool --upload-app -f ${{ runner.temp }}/mac_export/OpenSprinkler.pkg -t osx --apiKey ${{ secrets.IOS_APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
